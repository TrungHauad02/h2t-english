import {
  Test,
  TestPart,
  TestReading,
  TestListening,
  TestSpeaking,
  TestWriting,
  Question,
  Answer,
  TestTypeEnum,
  TestPartTypeEnum,
  CompetitionTest,
  Toeic
} from "interfaces";

const questions: Question[] = Array.from({ length: 300 }, (_, i) => ({
  id: i + 1,
  content: `Question ${i + 1}`,
  explanation: `Explanation for question ${i + 1}`,
  answers: Array.from({ length: 4 }, (_, j) => ({
    id: i * 4 + j + 1,
    content: `Answer ${j + 1} for question ${i + 1}`,
    correct: j === 0,
    questionId:i+1,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  })) as Answer[],
  status: true,
  createdAt: new Date(),
  updatedAt: new Date(),
}));

const testReadings: TestReading[] = [
  ...Array.from({ length: 20 }, (_, i) => ({
    id: i + 1,
    file: `reading_${i + 1}.pdf`,
    questions: questions.slice(i * 5, i * 5 + 5).map((q) => q.id),
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  })),
];

const testListenings: TestListening[] = Array.from({ length: 20 }, (_, i) => ({
  id: i + 1,
  audio: `listening_${i + 1}.mp3`,
  transcript: `Transcript for listening ${i + 1}`,
  questions: questions.slice(50 + i * 5, 50 + i * 5 + 5).map((q) => q.id),
  status: true,
  createdAt: new Date(),
  updatedAt: new Date(),
}));

const testSpeakings: TestSpeaking[] = Array.from({ length: 10 }, (_, i) => ({
  id: i + 1,
  title: `School`,
  questions: questions.slice(100 + i * 5, 100 + i * 5 + 5).map((q) => q.id),
  status: true,
  createdAt: new Date(),
  updatedAt: new Date(),
}));

const testWritings: TestWriting[] = Array.from({ length: 10 }, (_, i) => ({
  id: i + 1,
  topic: `Writing Topic ${i + 1}`,
  minWords: 100,
  maxWords: 500,
  status: true,
  createdAt: new Date(),
  updatedAt: new Date(),
}));

const testParts: TestPart[] = [
  {
    id: 1,
    type: TestPartTypeEnum.VOCABULARY,
    questions: questions.slice(150, 155).map((q) => q.id),
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 2,
    type: TestPartTypeEnum.GRAMMAR,
    questions: questions.slice(155, 160).map((q) => q.id),
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 3,
    type: TestPartTypeEnum.READING,
    questions: [testReadings[3].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 4,
    type: TestPartTypeEnum.LISTENING,
    questions: [testListenings[4].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 5,
    type: TestPartTypeEnum.SPEAKING,
    questions: [testSpeakings[0].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 6,
    type: TestPartTypeEnum.WRITING,
    questions: [testWritings[0].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 7,
    type: TestPartTypeEnum.WRITING,
    questions: [testWritings[1].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 11,
    type: TestPartTypeEnum.READING,
    questions: [testReadings[11].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 12,
    type: TestPartTypeEnum.READING,
    questions: [testReadings[12].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 13,
    type: TestPartTypeEnum.LISTENING,
    questions: [testListenings[13].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 14,
    type: TestPartTypeEnum.LISTENING,
    questions: [testListenings[14].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 15,
    type: TestPartTypeEnum.SPEAKING,
    questions: [testSpeakings[0].id],
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

const tests: Test[] = [
  {
    id: 1,
    title: `Mixing Test 1`,
    description: `Mixing test including vocabulary, grammar, reading, listening, speaking, and writing.`,
    duration: 90,
    type: TestTypeEnum.MIXING,
    parts: [1,2,3,4,5,6,7,11],
    totalQuestions: 30,
    scoreLastOfTest: null,
    routeNodeId: 1,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 11,
    title: `Reading Test 1`,
    description: `Mixing test including vocabulary, grammar, reading, listening, speaking, and writing.`,
    duration: 90,
    type: TestTypeEnum.READING,
    parts: [11,12],
    totalQuestions: 30,
    scoreLastOfTest: null,
    routeNodeId: 1,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 21,
    title: `Listening Test 1`,
    description: `.`,
    duration: 90,
    type: TestTypeEnum.LISTENING,
    parts: [13,14],
    totalQuestions: 30,
    scoreLastOfTest: null,
    routeNodeId: 101,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 31,
    title: `Speaking Test 1`,
    description: `.`,
    duration: 90,
    type: TestTypeEnum.SPEAKING,
    parts: [5,15],
    totalQuestions: 30,
    scoreLastOfTest: null,
    routeNodeId: 101,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: 41,
    title: `Writing Test 1`,
    description: `.`,
    duration: 90,
    type: TestTypeEnum.WRITING,
    parts: [6,7],
    totalQuestions: 30,
    scoreLastOfTest: null,
    routeNodeId: 101,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];
const CompetitionTests: CompetitionTest[] = [
  {
    id: 1,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    title: "English Championship 2025",
    duration: 120,
    totalQuestions: 50,
    startTime: new Date("2025-03-01T10:00:00"),
    endTime: new Date("2025-03-01T12:00:00"),
    parts: [1, 2, 3],
  },
  {
    id: 2,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    title: "Advanced Listening Competition",
    duration: 60,
    totalQuestions: 50,
    startTime: new Date("2025-03-22T14:00:00"),
    endTime: new Date("2025-03-23T15:00:00"),
    parts: [4],
  },
  {
    id: 3,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    title: "Speaking Skills Contest",
    duration: 30,
    totalQuestions: 50,
    startTime: new Date("2025-04-03T09:00:00"),
    endTime: new Date("2025-04-03T09:30:00"),
    parts: [5],
  },
  {
    id: 4,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    title: "Writing Challenge",
    duration: 90,
    totalQuestions: 50,
    startTime: new Date("2025-04-04T13:00:00"),
    endTime: new Date("2025-04-04T14:30:00"),
    parts: [6],
  },
  {
    id: 5,
    status: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    title: "General English Test",
    duration: 100,
    totalQuestions: 50,
    startTime: new Date("2025-04-05T11:00:00"),
    endTime: new Date("2025-04-05T13:20:00"),
    parts: [1, 2, 3, 4, 5, 6],
  },
];
const toeics: Toeic[] = Array.from({ length: 10 }, (_, i) => ({
  id: i + 1,
  title: `TOEIC Practice Test ${i + 1}`,
  duration: 120,
  questionsPart1: [1,2],
  questionsPart2: [1,2],
  questionsPart3:[1,2],
  questionsPart4: [1,2],
  questionsPart5: [1,2],
  questionsPart6: [1,2],
  questionsPart7: [1,2],
  totalQuestions: 200,
  scoreLastOfTest: i % 2 === 0 ? Math.floor(Math.random() * 201) : null,
  status: true,
  createdAt: new Date(),
  updatedAt: new Date(),
}));

export const mockData = {
  tests,
  CompetitionTests,
  toeics,
  testParts,
  questions,
  testReadings,
  testListenings,
  testSpeakings,
  testWritings,
};

export { questions };
